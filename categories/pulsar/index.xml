<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pulsar on zero.xu blog</title>
    <link>http://xujianhai.fun/categories/pulsar/</link>
    <description>Recent content in pulsar on zero.xu blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 03 Mar 2019 19:46:10 +0800</lastBuildDate>
    
	<atom:link href="http://xujianhai.fun/categories/pulsar/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pulsar Broker</title>
      <link>http://xujianhai.fun/posts/pulsar-broker/</link>
      <pubDate>Sun, 03 Mar 2019 19:46:10 +0800</pubDate>
      
      <guid>http://xujianhai.fun/posts/pulsar-broker/</guid>
      <description>这里分析Broker的主要实现.
impl  基于Netty实现网络层, ServerCnx.java 是网络层和Broker交互的媒介 Consumer: 消费者, Producer: 生产者, 负责消息投递状态的管理,producer统计. Topic: 负责管理 Producer&amp;amp;Subscription, 以及消息的存储 Subscription: 负责管理一组consumer. 支持 Exclusive/Failover/Shared 三种订阅模型, 每个订阅有自己的cursor和Dispatcher. Dispatcher: 负责消息的分发以及消费者的管理[添加、删除] ManagedCursor: cursor管理 ManagedLedger: 负责数据的存储, 主要是 消息数据 和 cursor数据  流程   消息的生产/消费 参照 生产流程分析 和 消费流程分析；这里简单描述:
Producer send message -&amp;gt; Network -&amp;gt; Netty Server -&amp;gt; Topic -&amp;gt; Subscription -&amp;gt; Dispacher -&amp;gt; Consumer -&amp;gt; Netty Server -&amp;gt; Network -&amp;gt; Consumer   消息redelivery
后面补充！
  消息去重</description>
    </item>
    
    <item>
      <title>Pulsar Broker Producer Proto</title>
      <link>http://xujianhai.fun/posts/pulsar-broker-producer-proto/</link>
      <pubDate>Sun, 03 Mar 2019 18:35:39 +0800</pubDate>
      
      <guid>http://xujianhai.fun/posts/pulsar-broker-producer-proto/</guid>
      <description>Debug 1.环境准备: 参照 之前的方式
2.terminal req:
 先发送produce请求 bin/pulsar-client produce my-topic &amp;ndash;messages &amp;ldquo;hello-pulsar1&amp;rdquo; bin/pulsar-client produce my-topic &amp;ndash;messages &amp;ldquo;hello-pulsar2&amp;rdquo;  服务端的交互 通过之前的调试方法, producer 和 broker 之间的交互协议:
CONNECT PARTITIONED_METADATA LOOKUP CONNECT PRODUCER SEND CLOSE_PRODUCER   Connect: lookup服务 进行权限校验
  PARTITIONED_METADATA: lookup服务获取topic的partition数量, zk查找 /admin/partitioned-topics/namespace/domain/topicName.
  LOOKUP: 获取topicName的broker地址
  CONNECT: producer连接 进行权限校验
  PRODUCER: 检查topic的权限
  SEND: 发送消息
Producer#publishMessage -&amp;gt; PersistentTopic#publishMessage -&amp;gt; ManagedLedgerImpl#asyncAddEntry -&amp;gt; OpAddEntry#initiate -&amp;gt; LedgerHandle#asyncAddEntry[bookkeeper] -&amp;gt; OpAddEntry#addComplete -&amp;gt; EntryCache#insert + PersistentTopic#addComplete[flush response] + ManagedLedgerImpl#notifyCursors[唤醒等待的读] -&amp;gt; ManagedCursorImpl#notifyEntriesAvailable -&amp;gt; ManagedLedgerImpl#asyncReadEntries -&amp;gt; 参照consumer   CLOSE_PRODUCER: 通知broker关闭该producer</description>
    </item>
    
    <item>
      <title>Pulsar Client Producer</title>
      <link>http://xujianhai.fun/posts/pulsar-client-producer/</link>
      <pubDate>Sun, 03 Mar 2019 14:43:01 +0800</pubDate>
      
      <guid>http://xujianhai.fun/posts/pulsar-client-producer/</guid>
      <description>这篇文章会对 producer 进行分析.
入口 这里通过org.apache.pulsar.client.tutorial.SampleProducer#main进行分析.
producer client impl 主要有 ProducerImpl 和 PartitionedProducerImpl 两种,
 ProducerImpl  实例化后, 会创建连接, 触发CONNECT、PRODUCER command 简单的直接发送消息   PartitionedProducerImpl  实例化的时候, 遍历partition实例化producer, 并监听partition变化. 发送消息时, 通过partition router选择指定的producer进行发送    初始化 先弄清几个概念, broker有两种角色, 如下
 充当Lookup服务的broker topic owner broker    在充当Lookup服务的broker, 可以通过提供 域名 + http服务 实现元数据的管理, 也可以通过 broker的二进制协议实现, 无论是 http协议服务, 还是二进制协议服务, 都只是服务的交互方式, 真正的元数据是存在zk中的
  topic owner broker 只做一件事情, 就是负责处理topic生产的消息, 进行消息的存储和分发.
  所以, producer创建的时候, 先连接到Lookup服务, 通过Lookup服务查询到topic的owner broker, 然后连接到 topic owner broker进行消息的发送.</description>
    </item>
    
    <item>
      <title>Pulsar Function</title>
      <link>http://xujianhai.fun/posts/pulsar-function/</link>
      <pubDate>Sun, 03 Mar 2019 10:07:06 +0800</pubDate>
      
      <guid>http://xujianhai.fun/posts/pulsar-function/</guid>
      <description>不赘述, 有空补</description>
    </item>
    
    <item>
      <title>Pulsar Proxy</title>
      <link>http://xujianhai.fun/posts/pulsar-proxy/</link>
      <pubDate>Sun, 03 Mar 2019 10:06:30 +0800</pubDate>
      
      <guid>http://xujianhai.fun/posts/pulsar-proxy/</guid>
      <description>proxy的作用  The Pulsar proxy is an optional gateway that you can run in front of the brokers in a Pulsar cluster. We recommend running a Pulsar proxy in cases when direction connections between clients and Pulsar brokers are either infeasible, undesirable, or both, for example when running Pulsar in a cloud environment or on Kubernetes or an analogous platform.
 根据官方的描述, proxy可以更好的解耦client和broker.
proxy impl  主要的类:   ProxyConnection: 处理proxy server的请求, ProxyConnectionPool: 后端broker client的连接池, LookupProxyHandler频繁使用 LookupProxyHandler: 负责 namespace topic的查找工作 DirectProxyHandler: broker client的处理器, 内部类 ProxyBackendHandler 负责协议相关 BrokerDiscoveryProvider: 负责从 zk上获取 topic metadata  消息收发流程  总结如下图:</description>
    </item>
    
    <item>
      <title>Pulsar Cleint Consumer</title>
      <link>http://xujianhai.fun/posts/pulsar-client-consumer/</link>
      <pubDate>Sun, 03 Mar 2019 09:59:33 +0800</pubDate>
      
      <guid>http://xujianhai.fun/posts/pulsar-client-consumer/</guid>
      <description>这篇文章会对 consumer 进行分析.
入口 这里通过org.apache.pulsar.client.tutorial.SampleConsumer#main进行分析.
consumer 实现 通过debug分析可以发现, consumer底层只有 ConsumerImpl、ZeroQueueConsumerImpl、 MultiTopicsConsumerImpl 和 PatternMultiTopicsConsumerImpl 四种. 其中, ConsumerImpl是基础的实现, 其他是基于ConsumerImpl进行的封装和组合处理. consumer和broker之间的协议交互通过 ClientCnx 进行处理, 协议分析参照链接.
这里针对四种consumer实现的差异进行说明:
 ConsumerImpl  实例化最后, 会调用方法grabCnx, 触发了连接的初始化工作: 创建连接, 发送 CONNECT command消息, 发送SUBSCRIBE command消息, 发送Flow command消息, 最终实现注册和服务端消息的推送. 服务端推送的消息会放到 incomingMessages 队列. 消息通过显式的调用 internalReceive() 从incomingMessages队列中取消息进行消费.   ZeroQueueConsumerImpl  继承ConsumerImpl进行实现, 但是重写了方法 canEnqueueMessage() 和 internalReceive() 以及其他方法 (其他的过于琐碎,不进行讨论) 重写 internalReceive(), 每次调用会清空 incomingMessages, 没有及时处理的消息就没有了. 然后主动Flow command 请求一条消息, 等待获取消息进行处理 重写 canEnqueueMessage(), 当 listener 方式处理消息, 直接回调, 那么, 消息就不会丢失   MultiTopicsConsumerImpl  多个consumer的集合.</description>
    </item>
    
    <item>
      <title>Pulsar Broker Consumer Proto</title>
      <link>http://xujianhai.fun/posts/pulsar-broker-consumer-proto/</link>
      <pubDate>Sat, 02 Mar 2019 21:40:57 +0800</pubDate>
      
      <guid>http://xujianhai.fun/posts/pulsar-broker-consumer-proto/</guid>
      <description>Debug 1.环境准备: 在 org.apache.pulsar.common.api.PulsarDecoder#channelRead 中对每一个 case 打点, 启动debug.
2.terminal req:
 先发送produce请求, 积累数据, 同时避免 consumer污染debug流程 bin/pulsar-client produce my-topic &amp;ndash;messages &amp;ldquo;hello-pulsar1&amp;rdquo; bin/pulsar-client produce my-topic &amp;ndash;messages &amp;ldquo;hello-pulsar2&amp;rdquo; 发送consume请求, 关注调试 bin/pulsar-client consume my-topic -t Shared -s demo-sub2 -n 0  服务端的交互 经过debug, 发现consumer主要通过一下几个流程:
CONNECT PARTITIONED_METADATA LOOKUP CONNECT SUBSCRIBE FLOW ACK CLOASE_CONSUMER 通过代码, 进行分析如下: (ps: 箭头表示调用关系)
1.CONNECT: lookup服务连接, 进行权限校验
2.PARTITIONED_METADATA: 获取topic的partition数量
3.CONNECT: consumer连接, 进行权限校验
4.LOOKUP: 获取topicName的broker地址
5.SUBSCRIBE: 订阅主题
ServerCnx#handleSubscribe -&amp;gt; PersistentTopic#subscribe -&amp;gt; PersistentSubscription#addConsumer -&amp;gt; PersistentDispatcherMultipleConsumers#addConsumer 6.</description>
    </item>
    
    <item>
      <title>Pulsar Debug</title>
      <link>http://xujianhai.fun/posts/pulsar-debug/</link>
      <pubDate>Sat, 02 Mar 2019 17:22:50 +0800</pubDate>
      
      <guid>http://xujianhai.fun/posts/pulsar-debug/</guid>
      <description> 首先, 在 ~/.m2/settings.xml中添加远程仓库配置:   &amp;lt;repositories&amp;gt; ... &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;central&amp;lt;/id&amp;gt; &amp;lt;layout&amp;gt;default&amp;lt;/layout&amp;gt; &amp;lt;url&amp;gt;https://repo1.maven.org/maven2&amp;lt;/url&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;snapshots&amp;gt; &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt; &amp;lt;/snapshots&amp;gt; &amp;lt;id&amp;gt;bintray-yahoo-maven&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;bintray&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://yahoo.bintray.com/maven&amp;lt;/url&amp;gt; &amp;lt;/repository&amp;gt; .... &amp;lt;/repositories&amp;gt; 这里使用Intellij进行调试. 相关配置:   启动类: org.apache.pulsar.PulsarStandaloneStarter 启动参数: &amp;ndash;config conf/standalone.conf &amp;ndash;no-functions-worker   intellij 启动成功后, 本地使用 consumer&amp;amp;producer测试.
  启动consumer: bin/pulsar-client consume my-topic -t Shared -s demo-sub2 -n 1
  启动produer: bin/pulsar-client produce my-topic &amp;ndash;messages &amp;ldquo;hello-pulsar&amp;rdquo; producer启动成功后, consumer控制面上会有 消息提示.
----- got message ----- hello-pulsar     </description>
    </item>
    
    <item>
      <title>Pulsar Intro</title>
      <link>http://xujianhai.fun/posts/pulsar-intro/</link>
      <pubDate>Sat, 02 Mar 2019 17:06:25 +0800</pubDate>
      
      <guid>http://xujianhai.fun/posts/pulsar-intro/</guid>
      <description>pulsar是 yahoo开发并开源的 分布式 pub-sub消息. 相比于 kafka/rocketmq, 最大的差异就是 存储上的不同. kafka 和 rocketmq 存储在 本地机器上, pulsar却是存储在 bookkeeper, 一种容错、低延迟、容错的存储服务, 专门为 append-only 类型进行优化. 这样的做法，可以实现存储层和计算层隔离, Broker 动态变化不依赖于数据的迁移，方便了扩容缩容.
pulsar实现上的主要特点:
 消息内容的数据写入到 bookkeeper. 封装的数据结构: ManagedLedgerImpl 消费的cursor 写入到 bookkeeper. 封装的数据结构: ManagedCursorImpl 消费的订阅关系 维护在 zk中. 封装的数据结构: MetaStoreImplZookeeper consumer类型: Exclusive/Failover 主要处理逻辑封装在 AbstractDispatcherSingleActiveConsumer, Shared 封装逻辑主要在 PersistentDispatcherMultipleConsumers. 支持partitioned topic 基于Netty的网络处理逻辑.  </description>
    </item>
    
  </channel>
</rss>