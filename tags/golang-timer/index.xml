<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang timer on zero.xu blog</title>
    <link>https://xujianhai.fun/tags/golang-timer/</link>
    <description>Recent content in golang timer on zero.xu blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 25 Mar 2020 10:23:01 +0800</lastBuildDate>
    
	<atom:link href="https://xujianhai.fun/tags/golang-timer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang_timer</title>
      <link>https://xujianhai.fun/posts/golang_timer/</link>
      <pubDate>Wed, 25 Mar 2020 10:23:01 +0800</pubDate>
      
      <guid>https://xujianhai.fun/posts/golang_timer/</guid>
      <description>背景 新版发布了新的定时器实现, 声称性能优化了很多. 这里特意记录. 同时, 也偶尔看到有同事写错了相关实现, 这里补充
历史 1.10 之前, 一个独立的timerproc通过小顶堆和futexsleep 管理定时任务 1.10 ~ 1.13: 64个timerproc协程 + 四插堆 1.14: 不再有timerproc, 基于 netpoll的epoll wait来做就近时间的休眠等待, 在每次runtime.findrinnable 调度时都检查运行到期的定时器
基本结构:   p 里面存储了 timers []*timer (runtime2.go), 其他辅助结构 timersLock 和 其他timer状态的计数, 使用 四插堆维护 timer, 使用锁避免插入冲突
  netpoller 支持 超时等待, 这样p可以利用这个特性进行timer的等待
  基本流程 timer 支持 Timer.NewTimer、 Timer.Stop 和 Timer.Reset 三种接口.
下面分析三个接口
  Timer.NewTimer 其实就是 创建了 timer对象, 然后调用了 runtime/time.addtimer 方法, 将timer对象添加到p的timers四插堆, 需要注意的是 这里执行了两个特殊的操作: cleantimers 和 wakeNetPoller, cleantimers 是删除 timer0(最早到期的那个); wakeNetPoller 只有在 新增timer的时间比较早的时候才会触发, 个人猜想是为了 解决 fundrunnable 阻塞在timer的设计 (后面细讲).</description>
    </item>
    
  </channel>
</rss>