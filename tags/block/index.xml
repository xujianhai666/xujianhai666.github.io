<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>block on zero.xu blog</title>
    <link>https://xujianhai.fun/tags/block/</link>
    <description>Recent content in block on zero.xu blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 08 Dec 2020 17:08:42 +0800</lastBuildDate>
    
	<atom:link href="https://xujianhai.fun/tags/block/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kernel_block</title>
      <link>https://xujianhai.fun/posts/kernel_block/</link>
      <pubDate>Tue, 08 Dec 2020 17:08:42 +0800</pubDate>
      
      <guid>https://xujianhai.fun/posts/kernel_block/</guid>
      <description>大部分在linux源码有所介绍, 这里针对代码层的实现大概讲解下 (可以用 https://code.woboq.org/linux/linux/include/linux/blk-mq.h.html 看, 但是最后还是下载到本地看代码了)
block I/O 请求是以 I/O 向量的形式进行提交和处理的
主要的数据结构 基本概念 部分基本概念在 深入理解linux内核 中有讲解.
sector: 硬件控制器的基本单元(传输数据的基本单元), 通常是512 block: vfs、fs 的基本数据单元(磁盘存储单元的最小视角), 扇区大小的整数倍, 比如2k、4k 段: 一个段就是一个内存页或者页的一部分. 管来管理磁盘上物理相邻的数据块 bio: 一次io操作. (block io的缩写, 包含多个段, 因为后续请求可能merge进来) 磁盘高速缓存: 用于磁盘数据的页 块缓冲区: 还没有接触到 物理段:	通用块层 将 ram页框连续并且磁盘上的数据块也是相邻的 进行合并 产生的内存区 硬件段: IO-MMU 处理的 物理地址-&amp;gt;硬件地址的映射进行的合并产生的内存区
基本数据结构: linux/include/linux/blk_types.h /* * main unit of I/O for the block layer and lower layers (ie drivers and * stacking drivers) */ struct bio { // 一个 bio 有多个链表组成, 所以经常 bio_for_each_segment struct bio	*bi_next;	/* request queue link */ // 一个请求中会合并相邻的bio, 所以是链表 bio_end_io_t	*bi_end_io; struct bio_vec	*bi_io_vec;	/* the actual vec list */ // 存放数据的页列表 struct bio_set	*bi_pool; .</description>
    </item>
    
  </channel>
</rss>