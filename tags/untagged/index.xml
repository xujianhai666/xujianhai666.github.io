<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>untagged on zero.xu blog</title>
    <link>https://xujianhai.fun/tags/untagged/</link>
    <description>Recent content in untagged on zero.xu blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 26 Mar 2020 17:49:31 +0800</lastBuildDate>
    
	<atom:link href="https://xujianhai.fun/tags/untagged/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rocketmq_dledger</title>
      <link>https://xujianhai.fun/posts/rocketmq_dledger/</link>
      <pubDate>Thu, 26 Mar 2020 17:49:31 +0800</pubDate>
      
      <guid>https://xujianhai.fun/posts/rocketmq_dledger/</guid>
      <description>Preface RocketMQ 去年实现了基于raft协议的 commitlog 存储库, 解决master-slave架构下 人工选主、切主 的故障转移的运维负担, 以及故障转移过程中数据丢失的问题.
raft 写入 raft 协议的写入如下:
 1. client -&amp;gt; leader: 客户端请求leader写入kv 2. leader append 本地日志(commitlog) 3. leader 并行发送日志给 follower 4. follower收到日志, 写入本地 commit log, 并 apply 本地的 FSM, 返回成功给 leader 5. leader收到follower超过半数以上的成功响应, 本地apply 日志到 FSM. 读取 raft 协议的读取如下:
 1. client -&amp;gt; leader: 客户端请求leader写入kv 2. leader 通过 lease 检查自己是否是 leader, 3. 检查是leader的情况下, 检查本地 apply index 和 客户端的 index, apply index大的话, 读取本地的状态机的数据 + apply index返回 4.</description>
    </item>
    
  </channel>
</rss>