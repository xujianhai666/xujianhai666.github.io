<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cpp on zero.xu blog</title>
    <link>https://xujianhai.fun/tags/cpp/</link>
    <description>Recent content in cpp on zero.xu blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 05 Apr 2020 19:36:11 +0800</lastBuildDate>
    
	<atom:link href="https://xujianhai.fun/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cpp_basic</title>
      <link>https://xujianhai.fun/posts/cpp_basic/</link>
      <pubDate>Sun, 05 Apr 2020 19:36:11 +0800</pubDate>
      
      <guid>https://xujianhai.fun/posts/cpp_basic/</guid>
      <description>背景 最近准备写 cpp 的一些项目, 学习下不太了解的领域.
book 术语 libc是Linux下原来的标准C库, 后来逐渐被glibc取代; glibc是Linux系统中最底层的API，几乎其它任何的运行库都要依赖glibc, glibc最主要的功能就是对系统调用的封装, 以及上层的接口 (malloc 等) glib也是个c程序库，不过比较轻量级，glib将C语言中的数据类型统一封装成自己的数据类型，提供了C语言常用的数据结构的定义以及处理函数 libc++是针对clang编译器特别重写的C++标准库，那libstdc++是gcc
concept ? 这个貌似很后面才有的 20？很像rust 了 模板元编程 参考: https://cloud.tencent.com/developer/article/1347878 策略 标签 特性
另外看书
memory order gcc 里面 consumer 语意和 acquire 是一样的, 从 cpp11 stckoverflow知道, 不建议使用 consume
https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html https://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync 这个例子很丰富, seq_cst 的效果和串行编程类似, relaxed 只是保证看到的只能是 更新的value, 没有线程同步语意, 纯粹是 atomic. Acquire/Release 只提供 有依赖关系的变量的 happen-before。 acquire-release 竟然只要求了 两个线程之间的同步 &amp;hellip;. 同步机制中, 本质上flush语意
奇怪了, __atomic_compare_exchange_n 中 success fail 是在哪一步起作用的？为什么 fail 的 memory order 要弱于 success?</description>
    </item>
    
  </channel>
</rss>